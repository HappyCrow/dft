TODO
====

- print sign ratio
- print encrypt ratio

- use rec. fun in client.ml to process the commands

remote get (rget): the CLI asks a remote DS to get
rget = rextract . rfetch

remote put (rput):
rput = rget . put

- put incoming messages of the MDS into a priority queue
  - initial queue size is 3 times the number of DSs
  - state updating messages must be processed with a higher priority
    than executing commands
    - use ZMQ.Socket.has_more to know if we can read more messages
    - batch at most N messages before processing the state updates
      first. Process messages immediately if less than N are available

- all the ZMQ.send can be made asynchronous
  - only the receive must not be

- command to test all files
  - optionally all chunks also
  It would compare their md5 to the one the MDS knows about.
  This is for dev. tests only.

PERFORMANCE
===========

- we can cache chunks coming in when not in raw mode
  - so that we don't need to compress|sign|encrypt them once
    more in the future

- interesting worst case to test:
  many hosts ask for the same small file at the same time
  (if there is no load balancing, then the system behaves badly)

SECURITY
========

- salt: a random int
  to_encrypt = salt ^ message
  to_send = crypt (encryption_key, to_encrypt)

- for signing messages, just use a MAC from cryptokit
  cryptokit-1.10/_build/src/api-cryptokit.docdir/Cryptokit.MAC.html
  hmac_sha1 would be fine

- for encryption: try AES and twofish
  - then prefer the one with the highest bitrate
  - use a stream cipher some day if better for performance
    (high bitrate + not growing messages are nice properties)

- before executing a command from the CLI, a DS or MDS
  could verify the signature of the command.
  only commands properly signed should be executed

PUBLIC RELATIONS
================

 - advertize first beta release on several mailing lists for
   computational scientists
   - caml-list
   - comp. chem. ML
   - open babel ML
   - CCP4 ML
   - linuxfr
